#include <Wire.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_LSM6DS3TRC.h>
#include <SoftwareSerial.h>
#include <SIM800L.h>
#define TINY_GSM_MODEM_SIM800
#include <TinyGsmClient.h>


// Define the 0.96 OLED display (SSD1306) on the XIAO Expansion board.

#define SCREEN_WIDTH 128  // OLED display width, in pixels
#define SCREEN_HEIGHT 64  // OLED display height, in pixels
#define OLED_RESET -1     // Reset pin # (or -1 if sharing Arduino reset pin)

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);


// IMU sensor
Adafruit_LSM6DS3TRC lsm6ds3trc;

// WiFi and SIM800L modules
SoftwareSerial wifiSerial(2, 3);     // RX, TX for WiFi module
SoftwareSerial sim800lSerial(4, 5);  // RX, TX for SIM800L module

SIM800L sim800l(&sim800lSerial, 7, 200, 512);  // SIM800L instance
#define SIM800_RX_PIN 10
#define SIM800_TX_PIN 11
#define SIM800_RST_PIN 6
#define APN "altanwifi"

// Crowley logo (128x64 bitmap)
const uint8_t company_logo[] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff,
  0xfc, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xf6, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xf9, 0x00,
  0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0x9c, 0x00, 0x00, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xe0, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0x90, 0x00, 0x00, 0x7f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff,
  0xfc, 0x0c, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf0, 0x3f, 0x01,
  0xff, 0xc0, 0xfe, 0x1f, 0x1f, 0x0e, 0x3f, 0xf0, 0x03, 0x87, 0xe1, 0xff, 0xe0, 0xff, 0xf0, 0x01,
  0x80, 0x00, 0x1f, 0xff, 0xc0, 0x0e, 0x00, 0x7f, 0x00, 0x3e, 0x1e, 0x1f, 0x0e, 0x1f, 0xf0, 0x03,
  0x83, 0xc3, 0xbf, 0xe0, 0xff, 0xf0, 0x03, 0xc0, 0x00, 0x3f, 0xff, 0x80, 0x1e, 0x00, 0x3e, 0x00,
  0x1e, 0x1e, 0x0e, 0x1e, 0x1f, 0xf0, 0x03, 0xc3, 0xc3, 0xff, 0xe0, 0xff, 0xf0, 0x03, 0xf0, 0x00,
  0x7f, 0xff, 0x00, 0x1e, 0x1c, 0x3c, 0x00, 0x0f, 0x1e, 0x0e, 0x1e, 0x1f, 0xf0, 0xff, 0xc1, 0x87,
  0xff, 0xe0, 0xff, 0xe0, 0x03, 0xfc, 0x01, 0xff, 0xfe, 0x07, 0xfe, 0x1e, 0x1c, 0x3f, 0x07, 0x0e,
  0x0e, 0x1e, 0x1f, 0xf1, 0xff, 0xe1, 0x87, 0xff, 0xe0, 0xff, 0xe0, 0x03, 0xfe, 0x07, 0xff, 0xfe,
  0x0f, 0xfe, 0x1e, 0x18, 0x3f, 0x87, 0x0c, 0x06, 0x1e, 0x1f, 0xf0, 0xff, 0xf0, 0x0f, 0xff, 0xe0,
  0xff, 0xe0, 0x03, 0xff, 0x9f, 0xff, 0xfe, 0x1f, 0xfe, 0x1c, 0x18, 0x7f, 0x87, 0x0c, 0x06, 0x3e,
  0x1f, 0xf0, 0x07, 0xf0, 0x1f, 0xff, 0xe0, 0xff, 0xe0, 0x03, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xfe,
  0x00, 0x38, 0x7f, 0x87, 0x8c, 0x44, 0x3e, 0x1f, 0xf0, 0x07, 0xf8, 0x1f, 0xff, 0xe0, 0xff, 0xe0,
  0x03, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xfe, 0x00, 0x78, 0x7f, 0x87, 0x80, 0xc4, 0x3e, 0x1f, 0xf0,
  0x07, 0xfc, 0x3f, 0xff, 0xe0, 0xff, 0xe0, 0x03, 0xff, 0x4f, 0xff, 0xfe, 0x1f, 0xfe, 0x00, 0x78,
  0x3f, 0x87, 0x80, 0xc0, 0x7e, 0x1f, 0xf0, 0xff, 0xfc, 0x3f, 0xff, 0xe0, 0xff, 0xe0, 0x03, 0xfc,
  0x37, 0xff, 0xfe, 0x0f, 0xfe, 0x18, 0x7c, 0x3f, 0x07, 0xc0, 0xe0, 0x7e, 0x1f, 0xf0, 0xff, 0xfc,
  0x3f, 0xff, 0xe0, 0xff, 0xf0, 0x03, 0xf8, 0x8f, 0xff, 0xff, 0x07, 0xce, 0x1c, 0x3c, 0x1e, 0x0f,
  0xc0, 0xe0, 0x7e, 0x1f, 0xf1, 0xff, 0xfc, 0x3f, 0xff, 0xe0, 0xff, 0xf0, 0x03, 0xe0, 0x17, 0xff,
  0xff, 0x00, 0x0e, 0x1c, 0x3e, 0x00, 0x0f, 0xc1, 0xe0, 0xfe, 0x00, 0x70, 0x03, 0xfc, 0x3f, 0xff,
  0xe0, 0xff, 0xf0, 0x01, 0x80, 0x07, 0xff, 0xff, 0x80, 0x0e, 0x1e, 0x1f, 0x00, 0x1f, 0xc1, 0xf0,
  0xfe, 0x00, 0x70, 0x01, 0xfc, 0x3f, 0xff, 0xe0, 0xff, 0xf8, 0x00, 0x00, 0x27, 0xbf, 0xff, 0xe0,
  0x1e, 0x1e, 0x0f, 0x80, 0x7f, 0xe1, 0xf0, 0xfe, 0x00, 0x70, 0x01, 0xfc, 0x3f, 0xff, 0xe0, 0xff,
  0xf8, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xfc, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xfc, 0x00,
  0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe0, 0xff, 0xfe, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0x00, 0x00, 0x03,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xe0, 0xff, 0xff, 0x80, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0x00, 0x0f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
  0xff, 0xff, 0xf0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xfe, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0
};

// Calibration data
float calibRoll = 0, calibPitch = 0;

// Contact numbers and threshold angles
String vesselName;
String contact1, contact2, contact3;
float alertRollThreshold = 3.0;   // Default Roll Alert Threshold in degrees
float alertPitchThreshold = 3.0;  // Default Pitch Alert Threshold in degrees

// Float switch pin
#define FLOAT_SWITCH_PIN 6

// Functions
void showLogo() {
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.display();
  delay(1000);

  display.clearDisplay();
  display.setTextColor(SSD1306_BLACK, SSD1306_WHITE);
  display.setCursor(0, 0);
  display.setTextSize(1);
  display.println(F("Vessel Monitoring System"));
  display.setTextSize(3);
  display.println("by");
  display.setTextSize(1);
  display.println("List Tender");
  display.display();
  delay(5000);
  display.clearDisplay();
  display.drawBitmap((SCREEN_WIDTH - 128) / 2, (SCREEN_HEIGHT - 64) / 2, company_logo, 128, 64, SSD1306_WHITE);
  display.display();
  delay(5000);
}

void countdown() {
  for (int i = 30; i > 0; i--) {
    display.clearDisplay();
    display.setTextSize(2);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(0, 10);
    display.print("Countdown:");
    display.setCursor(0, 40);
    display.print(i);
    display.display();
    delay(1000);
  }
  display.clearDisplay();
  display.display();
}

void calibrateIMU() {
  sensors_event_t accel;
  lsm6ds3trc.getEvent(&accel, NULL, NULL);
  // Convert to Euler angles
  calibRoll = atan2(accel.acceleration.y, accel.acceleration.z) * 180 / PI;
  calibPitch = atan2(-accel.acceleration.x, sqrt(accel.acceleration.y * accel.acceleration.y + accel.acceleration.z * accel.acceleration.z)) * 180 / PI;
}

void correctAngles(float &roll, float &pitch) {
  if (roll < 0) roll += 360;
  if (pitch < 0) pitch += 360;
  if (roll >= 360) roll -= 360;
  if (pitch >= 360) pitch -= 360;
}

void getInputFromWiFi() {
  Serial.println("Waiting for data from WiFi module...");
  while (!wifiSerial.available())
    ;
  String data = wifiSerial.readStringUntil('\n');
  int index = 0;

  vesselName = getValue(data, ',', index++);
  alertRollThreshold = getValue(data, ',', index++).toFloat();
  alertPitchThreshold = getValue(data, ',', index++).toFloat();
  contact1 = getValue(data, ',', index++);
  contact2 = getValue(data, ',', index++);
  contact3 = getValue(data, ',', index++);

  Serial.println("Data received:");
  Serial.println("Vessel Name: " + vesselName);
  Serial.println("Roll Alert Set Point: " + String(alertRollThreshold));
  Serial.println("Pitch Alert Set Point: " + String(alertPitchThreshold));
  Serial.println("Contact Number 1: " + contact1);
  Serial.println("Contact Number 2: " + contact2);
  Serial.println("Contact Number 3: " + contact3);
}

String getValue(String data, char separator, int index) {
  int found = 0;
  int strIndex[] = { 0, -1 };
  int maxIndex = data.length() - 1;

  for (int i = 0; i <= maxIndex && found <= index; i++) {
    if (data.charAt(i) == separator || i == maxIndex) {
      found++;
      strIndex[0] = strIndex[1] + 1;
      strIndex[1] = (i == maxIndex) ? i + 1 : i;
    }
  }
  return found > index ? data.substring(strIndex[0], strIndex[1]) : "";
}

void sendDataToGoogleSheets(float roll, float pitch, float batteryLevel, bool floatSwitchStatus) {
  // Construct the data string to send
  String data = "Vessel Name: " + vesselName + "\n";
  data += "Roll Difference: " + String(roll) + "\n";
  data += "Pitch Difference: " + String(pitch) + "\n";
  data += "Battery Level: " + String(batteryLevel) + "\n";
  data += "Contact 1: " + contact1 + "\n";
  data += "Contact 2: " + contact2 + "\n";
  data += "Contact 3: " + contact3 + "\n";
  data += "Float Switch Status: " + String(floatSwitchStatus ? "Open" : "Closed");

  // Send data to Google Sheets
  const char URL[] = "https://script.google.com/macros/s/AKfycbz9GE1vlq-C43e0RPlDiziaIhAnF1A9gweJej0S4Xa0wTOXRjw-4_OEngQfJNWJXg4Kog/exec";
  const char CONTENT_TYPE[] = "application/json";
  String payload = "{\"data\": \"" + data + "\"}";

  uint16_t rc = sim800l.doPost(URL, CONTENT_TYPE, payload.c_str(), 10000, 10000);
  if (rc == 200) {
    Serial.print(F("HTTP POST successful ("));
    Serial.print(sim800l.getDataSizeReceived());
    Serial.println(F(" bytes)"));
    Serial.print(F("Received : "));
    Serial.println(sim800l.getDataReceived());
  } else {
    Serial.print(F("HTTP POST error "));
    Serial.println(rc);
  }
}

void setup() {
  // Initialize Serial Monitor for debugging
  Serial.begin(115200);
  while (!Serial)
    ;

  // Initialize a SoftwareSerial
  SoftwareSerial *serial = new SoftwareSerial(SIM800_RX_PIN, SIM800_TX_PIN);
  serial->begin(9600);
  delay(1000);

  // Initialize SIM800L driver with an internal buffer of 200 bytes and a reception buffer of 512 bytes, debug disabled
  sim800l = SIM800L((Stream *)serial, SIM800_RST_PIN, 200, 512);

  // Equivalent line with the debug enabled on the Serial
  // sim800l = SIM800L((Stream *)serial, SIM800_RST_PIN, 200, 512, (Stream *)&Serial);

  // Setup module for GPRS communication
  setupModule();

  Wire.begin();
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // Ensure display is initialized
  pinMode(FLOAT_SWITCH_PIN, INPUT);

  wifiSerial.begin(9600);
  sim800lSerial.begin(9600);

  showLogo();
  countdown();

  if (!lsm6ds3trc.begin_I2C()) {
    Serial.println("Failed to initialize LSM6DS3TRC!");
    while (1)
      ;
  }

  calibrateIMU();
  getInputFromWiFi();  // Get vessel name, contact numbers, and alert thresholds
}

void loop() {
  // Establish GPRS connectivity (5 trials)
  bool connected = false;
  for (uint8_t i = 0; i < 5 && !connected; i++) {
    delay(1000);
    connected = sim800l.connectGPRS();
  }

  // Check if connected, if not reset the module and setup the config again
  if (connected) {
    Serial.print(F("GPRS connected with IP "));
    Serial.println(sim800l.getIP());
  } else {
    Serial.println(F("GPRS not connected !"));
    Serial.println(F("Reset the module."));
    sim800l.reset();
    setupModule();
    return;
  }

  // Read IMU data
  sensors_event_t accel;
  lsm6ds3trc.getEvent(&accel, NULL, NULL);
  float roll = atan2(accel.acceleration.y, accel.acceleration.z) * 180 / PI - calibRoll;
  float pitch = atan2(-accel.acceleration.x, sqrt(accel.acceleration.y * accel.acceleration.y + accel.acceleration.z * accel.acceleration.z)) * 180 / PI - calibPitch;
  correctAngles(roll, pitch);

  // Read float switch status
  bool floatSwitchStatus = digitalRead(FLOAT_SWITCH_PIN);

  // Read battery level (example, replace with actual reading)
  float batteryLevel = 100.0;  // Replace with actual battery level reading

  // Send data to Google Sheets
  sendDataToGoogleSheets(roll, pitch, batteryLevel, floatSwitchStatus);

  delay(1000);

  // Close GPRS connectivity (5 trials)
  bool disconnected = sim800l.disconnectGPRS();
  for (uint8_t i = 0; i < 5 && !connected; i++) {
    delay(1000);
    disconnected = sim800l.disconnectGPRS();
  }

  if (disconnected) {
    Serial.println(F("GPRS disconnected !"));
  } else {
    Serial.println(F("GPRS still connected !"));
  }

  // Go into low power mode
  bool lowPowerMode = sim800l.setPowerMode(MINIMUM);
  if (lowPowerMode) {
    Serial.println(F("Module in low power mode"));
  } else {
    Serial.println(F("Failed to switch module to low power mode"));
  }

  // End of program... wait...
  while (1)
    ;
}

void setupModule() {
  // Wait until the module is ready to accept AT commands
  while (!sim800l.isReady()) {
    Serial.println(F("Problem to initialize AT command, retry in 1 sec"));
    delay(1000);
  }

  Serial.println(F("Setup Complete!"));

  // Wait for the GSM signal
  uint8_t signal = sim800l.getSignal();
  while (signal <= 0) {
    delay(1000);
    signal = sim800l.getSignal();
  }
  Serial.print(F("Signal OK (strenght: "));
  Serial.print(signal);
  Serial.println(F(")"));
  delay(1000);

  // Wait for operator network registration (national or roaming network)
  NetworkRegistration network = sim800l.getRegistrationStatus();
  while (network != REGISTERED_HOME && network != REGISTERED_ROAMING) {
    delay(1000);
    network = sim800l.getRegistrationStatus();
  }
  Serial.println(F("Network registration OK"));
  delay(1000);

  // Setup APN for GPRS configuration
  bool success = sim800l.setupGPRS(APN);
  while (!success) {
    success = sim800l.setupGPRS(APN);
    delay(5000);
  }
  Serial.println(F("GPRS config OK"));
}

void resetCalibration() {
  calibrateIMU();
}
